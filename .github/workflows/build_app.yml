name: "Build App"

on:
  push:
    paths:
      - 'CertificateKit/**'
      - 'CertificateKitTests/**'
      - 'Inspect Website/**'
      - 'TLS Inspector/**'
      - 'TLS Inspector.xcodeproj/**'
      - 'TLS InspectorUITests/**'
  pull_request:
    paths:
      - 'CertificateKit/**'
      - 'CertificateKitTests/**'
      - 'Inspect Website/**'
      - 'TLS Inspector/**'
      - 'TLS Inspector.xcodeproj/**'
      - 'TLS InspectorUITests/**'
  schedule:
    - cron: "16 16 */2 * *"

permissions:
  packages: read

jobs:
  build:
    name: "Build App"
    runs-on: macos-latest
    steps:
      - name: Checkout Source
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      
      - name: Validate localization
        id: validate_localization
        run: |
          cd "TLS Inspector/Localization"
          python3 lang.py
          if [[ $(git diff --stat) != '' ]]; then
            echo "::error ::Untracked changes to localization detected!"
            git status
            exit 1
          else
            echo "No untracked changes to localization detected"
          fi
      
      - name: Install Profile and Certificates
        id: install_credentials
        run: |
          echo '${{ secrets.TLS_INSPECTOR_DEVELOPMENT_PROVISIONING_PROFILE }}' > TLS_Inspector.mobileprovision.base64
          echo '${{ secrets.INSPECT_CERTIFICATE_DEVELOPMENT_PROVISIONING_PROFILE }}' > Inspect_Website.mobileprovision.base64
          echo '${{ secrets.TEAM_DEVELOPMENT_PROVISIONING_PROFILE }}' > Team.mobileprovision.base64
          base64 -i TLS_Inspector.mobileprovision.base64 -o TLS_Inspector.mobileprovision --decode && rm TLS_Inspector.mobileprovision.base64
          base64 -i Inspect_Website.mobileprovision.base64 -o Inspect_Website.mobileprovision --decode && rm Inspect_Website.mobileprovision.base64
          base64 -i Team.mobileprovision.base64 -o Team.mobileprovision --decode && rm Team.mobileprovision.base64
          mkdir -p "~/Library/MobileDevice/Provisioning Profiles/"
          mv -v TLS_Inspector.mobileprovision   "~/Library/MobileDevice/Provisioning Profiles/0772352f-a056-453c-a9f8-e79bae67a3ac.mobileprovision"
          mv -v Inspect_Website.mobileprovision "~/Library/MobileDevice/Provisioning Profiles/47a88c2a-162b-461a-a9fe-e05f088dbe81.mobileprovision"
          mv -v Team.mobileprovision            "~/Library/MobileDevice/Provisioning Profiles/b7d45ac1-b567-4197-bdce-279fd8b4111f.mobileprovision"
          echo '-----BEGIN CERTIFICATE-----' > dev.crt
          echo '${{ secrets.APPLE_DEVELOPMENT_CERTIFICATE }}' >> dev.crt
          echo '-----END CERTIFICATE-----' >> dev.crt
          echo '${{ secrets.APPLE_DEVELOPMENT_PRIVATE_KEY }}' > dev.key.base64
          base64 -i dev.key.base64 -o dev.key --decode && rm dev.key.base64
          security import dev.crt -t cert -k ~/Library/Keychains/login.keychain-db -f pemseq -A
          security import dev.key -t priv -k ~/Library/Keychains/login.keychain-db -f openssl -A
          rm dev.key dev.crt
          gpg --import CertificateKit/build/curl-ios/curl.asc
          gpg --import CertificateKit/build/openssl-ios/openssl.asc
          echo 'trusted-key 0x78E11C6B279D5C91' >> ~/.gnupg/gpg.conf
          echo 'trusted-key 0xF9FEAFF9D34A1BDB' >> ~/.gnupg/gpg.conf
          echo 'trusted-key 0x5CC908FDB71E12C2' >> ~/.gnupg/gpg.conf
          echo 'trusted-key 0xD5E9E43F7DF9EE8C' >> ~/.gnupg/gpg.conf
          echo 'trusted-key 0xD9C4D26D0E604491' >> ~/.gnupg/gpg.conf
          echo 'trusted-key 0xB8EF1A6BA9DA2D5C' >> ~/.gnupg/gpg.conf
          echo 'trusted-key 0x231C84CDDCC69C45' >> ~/.gnupg/gpg.conf
      
      - name: Generate Cache Keys
        id: cache_key
        run: |
          echo "OPENSSL_CACHE_KEY=openssl_$(cat CertificateKit/build/openssl.want | cut -d '=' -f2)" >> "$GITHUB_OUTPUT"
          echo "CURL_CACHE_KEY=curl_$(cat CertificateKit/build/curl.want | cut -d '=' -f2)" >> "$GITHUB_OUTPUT"
          echo "CTLOG_CACHE_KEY=ctlog_$(cat CertificateKit/CTLogs/ct_log_version.txt)" >> "$GITHUB_OUTPUT"
          echo "ROOTCA_CACHE_KEY=rootca_$(cat CertificateKit/RootCACerts/bundle_version.txt)" >> "$GITHUB_OUTPUT"
      
      - name: Restore Cached OpenSSL
        id: restore_openssl
        uses: actions/cache@v3
        with:
          key: ${{ steps.cache_key.outputs.OPENSSL_CACHE_KEY }}
          path: |
            CertificateKit/openssl.xcframework
      
      - name: Build OpenSSL
        id: build_openssl
        if: ${{ steps.restore_openssl.outputs.cache-hit != 'true' }}
        run: |
          echo "::notice ::Compiling OpenSSL"
          cd CertificateKit/build
          ./build-openssl.sh
      
      - name: Restore Cached curl
        id: restore_curl
        uses: actions/cache@v3
        with:
          key: ${{ steps.cache_key.outputs.CURL_CACHE_KEY }}
          path: |
            CertificateKit/curl.xcframework
      
      - name: Build curl
        id: build_curl
        if: ${{ steps.restore_curl.outputs.cache-hit != 'true' }}
        run: |
          echo "::notice ::Compiling curl"
          cd CertificateKit/build
          ./build-curl.sh
      
      - name: Restore CT Logs
        id: restore_ctlogs
        uses: actions/cache@v3
        with:
          key: ${{ steps.cache_key.outputs.CTLOG_CACHE_KEY }}
          path: |
            CertificateKit/CTLogs/ct_log_list.min.json

      - name: Update CT Logs
        id: update_ctlogs
        if: ${{ steps.restore_ctlogs.outputs.cache-hit != 'true' }}
        run: |
          cd CertificateKit/CTLogs
          ./update.sh

      - name: Restore Root CA Certs
        id: restore_rootca
        uses: actions/cache@v3
        with:
          key: ${{ steps.cache_key.outputs.ROOTCA_CACHE_KEY }}
          path: |
            CertificateKit/RootCACerts/*.p7b
            CertificateKit/RootCACerts/*.p7b.sig
            CertificateKit/RootCACerts/*.json
            CertificateKit/RootCACerts/*.json.sig

      - name: Update Root CA Certs
        id: uodate_rootca
        if: ${{ steps.restore_rootca.outputs.cache-hit != 'true' }}
        run: |
          cd CertificateKit/RootCACerts
          ./update.sh

      - name: Build
        id: build
        run: |
          xcodebuild -scheme "TLS Inspector" -project "TLS Inspector.xcodeproj" -sdk iphonesimulator build
